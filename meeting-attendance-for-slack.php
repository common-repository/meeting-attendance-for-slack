<?php
/**
 * Plugin Name: Meeting Attendance for Slack
 * Plugin URI: http://www.clorith.net
 * Description: A brief description of the Plugin.
 * Version: 1.0.1
 * Author: Clorith
 * Author URI: http://www.clorith.net
 * License: GLPv2
 * Text Domain: meeting-attendance-for-slack
 * Domain Path: /languages
 */

class Meeting_Attendance_For_Slack {
	private $notices = array();
	private $allow_reactions = true;

	public function __construct() {
		// Only include the slack things if Slack has been authorized
		if ( false !== get_option( 'slack_attendance_token', false ) ) {
			add_action( 'admin_head', array( $this, 'tinymce_extension' ) );

			add_action( 'admin_enqueue_scripts', array( $this, 'admin_scripts' ) );

			add_shortcode( 'slack-attendees', array( $this, 'shortcode' ) );
		}

		add_action( 'plugins_loaded', array( $this, 'load_textdomain' ) );

		add_action( 'init', array( $this, 'capture_token' ) );
		add_action( 'init', array( $this, 'capture_actions' ) );
		add_action( 'init', array( $this, 'authorize' ) );

		add_action( 'admin_menu', array( $this, 'options_page' ) );
		add_action( 'network_admin_menu', array( $this, 'network_options_page' ) );
		add_action( 'admin_notices', array( $this, 'show_notices' ) );
	}

	/**
	 * Load plugin text domains for translation files to take effect.
	 *
	 * @since 2.0.0
	 *
	 * @return void
	 */
	function load_textdomain() {
		load_plugin_textdomain( 'meeting-attendance-for-slack', FALSE, basename( dirname( __FILE__ ) ) . '/languages/' );
	}

	/**
	 * Perform a request to the Slack API.
	 *
	 * @uses wp_remote_get
	 * @uses wp_remote_retrieve_body
	 * @uses esc_html__
	 *
	 * @since 1.0.0
	 *
	 * @param string $call The API method to call
	 * @param array  $attr An array of attributes to send with the API call
	 *
	 * @return bool|mixed|object
	 */
	private function slack_api( $call, $attr = array() ) {
		$url = sprintf(
			'https://slack.com/api/%s?%s',
			$call,
			http_build_query( $attr )
		);

		$http_response = wp_remote_get( $url );

		$response = json_decode( wp_remote_retrieve_body( $http_response ) );

		if ( true === $response->ok ) {
			return $response;
		}
		else {
			$this->notices[] = (object) array(
				'type'    => 'error',
				'message' => sprintf(
					esc_html__( 'A Slack call failed with the following error code: %s' ),
					$response->error
				)
			);

			return false;
		}
	}

	/**
	 * Identify actions triggered by the plugin options screen.
	 *
	 * @uses is_admin
	 * @uses get_option
	 * @uses esc_html__
	 * @uses delete_option
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function capture_actions() {
		if ( ! is_admin() || ! isset( $_GET['slack-action'] ) || ! isset( $_GET['page'] ) || 'slack-attendance' != $_GET['page'] ) {
			return;
		}

		switch( $_GET['slack-action'] ) {
			case 'slack-attendance-auth-revoke':
				if ( ! wp_verify_nonce( $_GET['_revoke_slack_auth_nonce'], 'revoke-slack-auth' ) ) {
					return;
				}

				$status = $this->slack_api( 'auth.revoke', array( 'token' => get_option( 'slack_attendance_token' ) ) );

				if ( $status ) {
					$this->notices[] = (object) array(
						'type'    => 'success',
						'message' => esc_html__( 'The plugin has been disconnected from your Slack account.', 'meeting-attendance-for-slack' )
					);

					delete_option( 'slack_attendance_token' );
				}
				break;
			case 'slack-attendance-update-channels':
				if ( ! wp_verify_nonce( $_GET['_update_slack_channel_list'], 'fetch-slack-channel-list' ) ) {
					return;
				}

				$this->notices[] = (object) array(
					'type'    => 'info',
					'message' => esc_html__( 'A call to update the channel list has been queued.', 'meeting-attendance-for-slack' )
				);

				$this->get_slack_channels( null, true );

				break;
		}
	}

	/**
	 * Output notices generated by the plugin as admin notices.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function show_notices() {
		if ( empty( $this->notices ) ) {
			return;
		}

		foreach( $this->notices AS $notice ) {
			printf(
				'<div class="notice notice-%s"><p>%s</p></div>',
				$notice->type,
				$notice->message
			);
		}
	}

	/**
	 * Track the return from Slack with the single use code for getting an oAuth token.
	 *
	 * @uses is_admin
	 * @uses wp_verify_nonce
	 * @uses get_option
	 * @uses admin_url
	 * @uses esc_html__
	 * @uses update_option
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function capture_token() {
		if ( is_admin() && isset( $_GET['code'] ) && isset( $_GET['state'] ) ) {
			if ( ! wp_verify_nonce( $_GET['state'], 'slack-attendance-create-token' ) ) {
				return;
			}

			$token = $this->slack_api( 'oauth.access', array(
				'client_id'     => get_option( 'slack_attendance_id' ),
				'client_secret' => get_option( 'slack_attendance_secret' ),
				'code'          => $_GET['code'],
				'redirect_uri'  => admin_url( 'options-general.php?page=slack-attendance' )
			) );

			$this->notices[] = (object) array(
				'type'    => 'success',
				'message' => esc_html__( 'The plugin has been successfully authorized with Slack.', 'meeting-attendance-for-slack' )
			);

			update_option( 'slack_attendance_token', $token->access_token, false );

			$this->get_slack_channels( null, true );
		}
	}

	/**
	 * The action performed when the authorize button on the options page is triggered.
	 *
	 * @uses is_admin
	 * @uses current_user_can
	 * @uses esc_html__
	 * @uses update_option
	 * @uses sanitize_text_field
	 * @uses admin_url
	 * @uses wp_create_nonce
	 * @uses wp_redirect
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function authorize() {
		if ( ! is_admin() || ! isset( $_POST['slack-attendance-id'] ) || ! current_user_can( 'install_plugins' ) ) {
			return;
		}

		if ( empty( $_POST['slack-attendance-id'] ) || empty( $_POST['slack-attendance-secret'] ) ) {
			$this->notices[] = (object) array(
				'type'    => 'error',
				'message' => esc_html__( 'Both the Client ID and Client Secret fields need to be filled in to authorize the plugin.', 'meeting-attendance-for-slack' )
			);

			return;
		}

		update_option( 'slack_attendance_id', sanitize_text_field( $_POST['slack-attendance-id'] ), false );

		if ( ! empty( $_POST['slack-attendance-secret'] ) ) {
			update_option( 'slack_attendance_secret', sanitize_text_field( $_POST['slack-attendance-secret'] ), false );
		}

		$auth_path = sprintf(
			'%s?%s',
			'https://slack.com/oauth/authorize',
			http_build_query( array(
				'client_id'    => sanitize_text_field( $_POST['slack-attendance-id'] ),
				'scope'        => 'users:read channels:read channels:history',
				'redirect_uri' => admin_url( 'options-general.php?page=slack-attendance' ),
				'state'        => wp_create_nonce( 'slack-attendance-create-token' )
			) )
		);

		wp_redirect( $auth_path );
	}

	/**
	 * Create the non-network options page entry.
	 *
	 * @uses is_plugin_active_for_network
	 * @uses add_submenu_page
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	function options_page() {
		if ( is_plugin_active_for_network( __FILE__ ) ) {
			return;
		}

		add_submenu_page(
			'options-general.php',
			__( 'Slack Attendance Options' ),
			__( 'Slack Attendance' ),
			'install_plugins',
			'slack-attendance',
			array( $this, 'render_options_page' )
		);
	}

	/**
	 * Create the network options page entry.
	 *
	 * @uses is_plugin_active_for_network
	 * @uses add_submenu_page
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	function network_options_page() {
		if ( ! is_plugin_active_for_network( __FILE__ ) ) {
			return;
		}

		add_submenu_page(
			'settings.php',
			__( 'Slack Attendance Options' ),
			__( 'Slack Attendance' ),
			'install_plugins',
			'slack-attendance',
			array( $this, 'render_options_page' )
		);
	}

	/**
	 * Output the options page
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	function render_options_page() {
		include_once( dirname( __FILE__ ) . '/includes/options.php' );
	}

	/**
	 * Create our shortcode output.
	 *
	 * @param array $atts {
	 *     An array of shortcode attributes.
	 *
	 *     @type string $channel  Default null. The channel from where to get attendees.
	 *     @type string $start    Default 0. The Slack archive URL for the start of the meeting.
	 *     @type string $end      Default 0. The Slack archive URL for the end of the meeting.
	 *     @type string reactions Default 'yes'. A conditional `yes` or `no` if reactions should be counted as attendance.
	 * }
	 *
	 * @return string
	 */
	public function shortcode( $atts ) {
		$atts = shortcode_atts( array(
			'channel'   => null,
			'start'     => 0,
			'end'       => 0,
			'reactions' => 'yes'
		), $atts );

		$this->allow_reactions = ( 'yes' == $atts['reactions'] );

		$store_result = true;

		if ( empty( $atts['channel'] ) ) {
			return esc_html__( 'Slack attendance has not been properly defined.', 'meeting-attendance-for-slack' );
		}

		// If the end time is set set to 0, we will always have to re-check for new attendances
		if ( 0 === $atts['end'] ) {
			$store_result = false;
		}

		if ( ! empty( $atts['start'] ) ) {
			$parts         = explode( '/', $atts['start'] );
			$timestamp     = str_ireplace( 'p', '', end( $parts ) );
			$atts['start'] = sprintf(
				'%s.%s',
				substr( $timestamp, 0, -6 ),
				substr( $timestamp, -6 )
			);
		}

		if ( ! empty( $atts['end'] ) ) {
			$parts       = explode( '/', $atts['end'] );
			$timestamp   = str_ireplace( 'p', '', end( $parts ) );
			$atts['end'] = sprintf(
				'%s.%s',
				substr( $timestamp, 0, -6 ),
				substr( $timestamp, -6 )
			);
		}

		$hash = md5( sprintf(
			'%s-%s-%s',
			$atts['channel'],
			$atts['start'],
			$atts['end']
		) );

		$attendees = get_post_meta( get_the_ID(), sprintf( '%s_%s', 'slack_attendance', $hash ), true );
		if ( empty( $attendees ) ) {
			$attendees = $this->get_slack_attendees( $atts['channel'], $atts['start'], $atts['end'] );

			if ( $store_result ) {
				update_post_meta( get_the_ID(), sprintf( '%s_%s', 'slack_attendance', $hash ), $attendees );
			}
		}

		return implode( ', ', $attendees );
	}

	/**
	 * Set up JavaScript enqueues.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function admin_scripts() {
		$screen = get_current_screen();
		if ( ! isset( $screen->id ) || 'post' !== $screen->base ) {
			return;
		}

		wp_enqueue_style( 'slack-attendance', plugins_url( '/resources/css/slack-attendance.css', __FILE__ ), array(), '1.0.0' );

		$channels     = array();
		$channel_list = $this->get_slack_channels();
		foreach( $channel_list AS $channel => $id ) {
			$channels[] = array(
				'text'  => $channel,
				'value' => $channel
			);
		}

		$slack = array(
			'channels'       => $channels,
			'tinymce'        => array(
				'icon' => plugins_url( '/resources/images/Slack-logo.png', __FILE__ )
			),
			'show_reactions' => array(
				array(
					'text'  => __( 'Reactions are counted', 'meeting-attendance-for-slack' ),
					'value' => 'yes'
				),
				array(
					'text'  => __( 'Reactions are not counted', 'meeting-attendance-for-slack' ),
					'value' => 'no'
				)
			),
			'labels'         => array(
				'tooltip'   => __( 'Slack attendance', 'meeting-attendance-for-slack' ),
				'modal'     => __( 'Slack attendance', 'meeting-attendance-for-slack' ),
				'start'     => __( 'Start archive URL', 'meeting-attendance-for-slack' ),
				'end'       => __( 'End archive URL', 'meeting-attendance-for-slack' ),
				'channel'   => __( 'Channel', 'meeting-attendance-for-slack' ),
				'reactions' => __( 'Count reactions', 'meeting-attendance-for-slack' )
			)
		);

		wp_localize_script(
			'jquery',
			'slack_attendance',
			$slack
		);
	}

	/**
	 * Get a list of public channels from a Slack team.
	 *
	 * @since 1.0.0
	 *
	 * @param string $fetch_channel Default null. A channel name if you wish to get individual details.
	 * @param bool   $force         Default false. Force update the list of channels.
	 *
	 * @return array|bool
	 */
	public function get_slack_channels( $fetch_channel = null, $force = false ) {
		if ( false === ( $channels = get_transient( 'slack_attendance_channels' ) ) || $force ) {
			$api_key = get_option( 'slack_attendance_token', false );
			if ( ! $api_key ) {
				return false;
			}

			$channel_list = $this->slack_api( 'channels.list', array(
				'token'            => $api_key,
				'exclude_archived' => 1
			) );
			if ( $channel_list ) {
				$channels = array();

				foreach ( $channel_list->channels AS $channel ) {
					$channels[ $channel->name ] = $channel->id;
				}

				$this->notices[] = (object) array(
					'type'    => 'success',
					'message' => esc_html__( 'An updated list of channels has been generated.', 'meeting-attendance-for-slack' )
				);

				set_transient( 'slack_attendance_channels', $channels, WEEK_IN_SECONDS );
			}
		}

		if ( ! empty( $fetch_channel ) ) {
			if ( isset( $channels[ $fetch_channel ] ) ) {
				return $channels[ $fetch_channel ];
			}
			else {
				return false;
			}
		}

		return $channels;
	}

	/**
	 * Add TinyMCE buttons if the user has the rich editor enabled.
	 *
	 * @since 1.0.0
	 *
	 * @return void
	 */
	public function tinymce_extension() {
		if ( 'true' == get_user_option( 'rich_editing' ) ) {
			add_filter( 'mce_external_plugins', array( $this, 'add_tinymce_plugin' ) );
			add_filter( 'mce_buttons', array( $this, 'register_mce_button' ) );
		}
	}


	/**
	 * Add our plugin shortcode JavaScript.
	 *
	 * @since 1.0.0
	 *
	 * @param array $plugins
	 *
	 * @return array
	 */
	public function add_tinymce_plugin( $plugins ) {
		$plugins['slack_attendance_button'] = plugin_dir_url( __FILE__ ) . '/resources/js/add-shortcode.js';

		return $plugins;
	}

	/**
	 * Include the plugin button in the list of buttons available on the editor.
	 *
	 * @param array $buttons
	 *
	 * @return array
	 */
	public function register_mce_button( $buttons ) {
		array_push( $buttons, 'slack_attendance_button' );

		return $buttons;
	}

	/**
	 * Get a list of attendees from a channel within a given timespan.
	 *
	 * @uses get_option
	 *
	 * @since 1.0.0
	 *
	 * @param string $channel   The channel we are getting attendance from.
	 * @param int    $log_start Default 0. The start time for the log, `0` starts from the start of time.
	 * @param int    $log_end   Default 0. The end time for the log, `0` means up until right now.
	 *
	 * @return array|bool
	 */
	public function get_slack_attendees( $channel, $log_start = 0, $log_end = 0 ) {
		$api_key = get_option( 'slack_attendance_token', false );
		if ( ! $api_key ) {
			return false;
		}

		$more_messages = true;
		$mapped_users  = array();

		$url_attr      = array(
			'token'     => $api_key,
			'channel'   => $this->get_slack_channels( $channel ),
			'oldest'    => $log_start,
			'latest'    => $log_end,
			'inclusive' => 1,
			'count'     => 1000
		);

		while ( $more_messages ) {
			$logs = $this->slack_api( 'channels.history', $url_attr );

			if ( ! $logs ) {
				return false;
			}

			if ( ! $logs->has_more ) {
				$more_messages = false;
			} else {
				$last_log = $logs->messages[0];
				$url_attr['oldest'] = $last_log->ts;
			}

			foreach( $logs->messages AS $message ) {
				if ( ! isset( $message->user ) ) {
					continue;
				}

				if ( ! isset( $mapped_users[ $message->user ] ) ) {
					$mapped_users[ $message->user ] = array();
				}

				if ( isset( $message->reactions ) && $this->allow_reactions ) {
					foreach( $message->reactions AS $reaction ) {
						foreach( $reaction->users AS $react_user ) {
							if ( ! isset( $mapped_users[ $react_user ] ) ) {
								$mapped_users[ $react_user ] = array();
							}
						}
					}
				}
			}
		}

		foreach( $mapped_users AS $user => $data ) {
			$mapped_users[ $user ] = $this->get_slack_user_info( $user );
		}

		return $mapped_users;
	}

	/**
	 * Get user details registered on Slack.
	 *
	 * @uses get_transient
	 * @uses get_option
	 * @uses esc_html
	 * @uses set_transient
	 *
	 * @since 1.0.0
	 *
	 * @param string $user The userid from Slack to get details on.
	 *
	 * @return bool|mixed
	 */
	public function get_slack_user_info( $user ) {
		if ( false === ( $users = get_transient( 'slack_attendance_users' ) ) ) {
			$users = array();
		}

		if ( isset( $users[ $user ] ) && ! empty( $users[ $user ] ) ) {
			return $users[ $user ];
		}

		$api_key = get_option( 'slack_attendance_token', false );
		if ( ! $api_key ) {
			return false;
		}

		$user_result = $this->slack_api( 'users.info', array(
			'token' => $api_key,
			'user'  => $user
		) );

		$users[ $user ] = ( ! empty( $user_result->user->real_name ) ? $user_result->user->real_name : $user_result->user->name );

		set_transient( 'slack_attendance_users', $users, MONTH_IN_SECONDS );

		/**
		 * Filter the Slack user listed by the shortcode.
		 *
		 * Allow the modification of the Slack names that are displayed by the shortcode, either by appending,
		 * prepending or overwriting it completely.
		 *
		 * Slack names are by default escaped for any HTML entities.
		 *
		 * @since 1.0.1
		 *
		 * @param string $user_result->user->real_name The real name set on the users Slack profile.
		 * @param object $user_result->user            {
		 *     An object containing all the users details.
		 *
		 *     @type string $id                  The internal ID user for a user by Slack.
		 *     @type string $team_id             The internal ID for the team the user belongs to.
		 *     @type string $name                The users nickname on Slack, this is a fixed value.
		 *     @type bool   $deleted             If the user is still available or not.
		 *     @type string $real_name           The users real name as set in their profile.
		 *     @type string $tz                  The timezone the user has set.
		 *     @type string $tz_label            The timezone label for the users preference.
		 *     @type int    $tz_offset           The offset between the users timezone and UTC.
		 *     @type object $profile             {
		 *         @type string $avatar_hash
		 *         @type string $first_name
		 *         @type string $last_name
		 *         @type string $title,
		 *         @type string $phone,
		 *         @type string $skype
		 *         @type string $real_name
		 *         @type string $real_name_normalized
		 *         @type string $email
		 *         @type string $image_24
		 *         @type string $image_32
		 *         @type string $image_48
		 *         @type string $image_72
		 *         @type string $image_192
		 *         @type string $image_512
		 *     }
		 *     @type bool   $is_admin            A boolean value representing if the user is a team admin.
		 *     @type bool   $is_owner            A boolean value representing if the user is a team owner.
		 *     @type bool   $is_primary_owner    A boolean value representing if the user is the teams original owner.
		 *     @type bool   $is_restricted
		 *     @type bool   $is_ultra_restricted
		 *     @type bool   $is_bot
		 *     @type bool   $has_2fa             Does this user have 2FA enabled on their account.
		 *
		 * }
		 */
		return apply_filters( 'slack_attendance_user_real_name', esc_html( $user_result->user->real_name ), $user_result->user );
	}
}

new Meeting_Attendance_For_Slack();